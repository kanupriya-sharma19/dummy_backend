generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  password             String
  dob                  DateTime?
  gender               String?
  city                 String?
  gamePreferences      String[]
  profilePhoto         String?
  resetToken           String?   @unique
  resetTokenExpiration DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  phoneNumber          String    @default("N/A")
  role                 Role      @default(USER)
  bookings             Booking[]
  reviews              Review[]  @relation("UserReviews")
}

model TurfOwner {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  profilePhoto String?
  phoneNumber  String

  turfPhoto       String[]
  turfName        String
  turfDescription String?
  turfLocation    String
  turfSize        String?
  turfGames       String[]
  amenities       String[]
  ratings         Float    @default(0.0)
  pricePerPerson  Float?

  totalSeats        Int?
  availableSeats    Int     @default(0)
  available         Boolean @default(true)
  availabilitySlots Json?

  ownerType          TurfOwnerType
  organizationName   String? // Required if ownerType = ORGANIZATION
  registrationNumber String? // Required if ownerType = ORGANIZATION
  contactPersonName  String? // Required if ownerType = ORGANIZATION
  contactPersonPhone String? // Required if ownerType = ORGANIZATION
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  bookings           Booking[]
  reviews            Review[]      @relation("TurfReviews")
}

enum TurfOwnerType {
  INDIVIDUAL
  ORGANIZATION
}

model Review {
  id        String    @id @default(cuid())
  user      User      @relation(name: "UserReviews", fields: [userId], references: [id])
  userId    String
  turf      TurfOwner @relation(name: "TurfReviews", fields: [turfId], references: [id])
  turfId    String
  rating    Float     @default(0.0)
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETED
}

model Booking {
  id            String    @id @default(cuid())
  turfId        String
  userId        String
  numberOfSeats Int
  day           String
  bookedFrom    DateTime
  bookedTo      DateTime
  status        Status    @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  turf          TurfOwner @relation(fields: [turfId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  Review        Review?   @relation(fields: [reviewId], references: [id])
  reviewId      String?
}

enum Role {
  ADMIN
  USER
  TURFOWNER
}
